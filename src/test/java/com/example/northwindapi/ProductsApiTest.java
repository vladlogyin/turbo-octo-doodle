package com.example.northwindapi;

import com.example.northwindapi.annotations.EmployeeObject;
import com.example.northwindapi.annotations.ProductObject;
import com.example.northwindapi.entities.ProductEntity;
import com.example.northwindapi.repositories.ProductEntityRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import org.json.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.bind.annotation.*;

import java.io.DataInput;
import java.io.IOException;
import java.net.*;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.util.List;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

@SpringBootTest
@AutoConfigureMockMvc
public class ProductsApiTest {
    @Autowired
    private MockMvc mvc;
    @Autowired
    private ProductEntityRepository productRepo;
    @Autowired
    private ObjectMapper mapper;

    @Test
    public void testGet() throws Exception {
        for(int i=0;i<100;i++)
        {
            if(productRepo.existsById(i))
            {
                ProductEntity pEntity = productRepo.findById(i).get();
                mvc.perform(get("/product/by-id/"+i))
                        .andExpect(status().isOk());
            }
            else
            {
                mvc.perform(get("/product/by-id/"+i))
                        .andExpect(status().is4xxClientError());
            }
        }
    }


    @Test
    //@GetMapping("/product/by-id/{ProductID}/stock")
    public void getAllStockByProductId() {
        ObjectMapper mapper = new ObjectMapper();
        try {
            ProductObject result = mapper.readValue(
                    new URL("http://localhost:8123/product/by-id/1/stock"),
                    ProductObject.class);
            Assertions.assertEquals(6, result.getUnitsInStock());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    @Test
    public void testDelete() throws Exception {

        for(int i=0;i<100;i++) {
            if (productRepo.existsById(i)) {
                mvc.perform(delete("/product/delete/"+i)).andExpect(status().isOk());
                return;
            }
        }
    }

    @Test
    public void testPost() throws Exception {
        mvc.perform(post("/product/new")
                        .contentType("application/json")
                        .content("{\"id\":69420,\"productName\":\"Thomas the tank engine\",\"categoryID\":{\"id\":1,\"categoryName\":\"Beverages\",\"description\":\"Soft drinks, coffees, teas, beers, and ales\",\"picture\":\"\",\"hibernateLazyInitializer\":{}},\"quantityPerUnit\":\"10 boxes x 20 bags\",\"unitPrice\":18.0000,\"unitsInStock\":39,\"unitsOnOrder\":0,\"reorderLevel\":10,\"discontinued\":false}"))
                .andExpect(status().is2xxSuccessful());

    }

}
